apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: order-management-template
  title: Order Management Service with ArgoCD
  description: Create a simple app based Quarkus with ArgoCD
  tags:
    - recommended
    - java
    - quarkus
    - maven
spec:
  owner: feven@redhat.com
  type: service
  parameters:
    - title: Provide Information for Application
      required:
        - component_id
        - owner
        - java_package_name
        - cluster_ingress_path
      properties:
        githubOrg:
          title: GitHub Organization
          type: string
          default: feven-redhat
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          default: my-quarkus-app
          ui:field: EntityNamePicker
        group_id:
          title: Group Id
          type: string
          default: redhat.janus
          description: Maven Group Id
        cluster_ingress_path:
          title: cluster ingress path
          type: string
          default: .apps.cluster-name.your-base-domain.com
          description: You cluster ingress path
        artifact_id:
          title: Artifact Id
          type: string
          default: quarkus-app
          description: Maven Artifact Id
        java_package_name:
          title: Java Package Name
          default: org.redhat.janus
          type: string
          description: Name for the java package. eg (com.redhat.blah)
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: IdP owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Provide Image Registry Information
      required:
        - image_registry
      properties:
        image_registry:
          title: Image Registry
          type: string
          enum:
            - Openshift
            - Quay
      dependencies:
        image_registry:
          oneOf:
            - properties:
                image_registry:
                  enum:
                    - Openshift
                image_host:
                  title: Image Host
                  type: string
                  description: Host for storing image
                  default: image-registry.openshift-image-registry.svc:5000
            - properties:
                image_registry:
                  enum:
                    - Quay
                image_host:
                  title: Image Host
                  type: string
                  description: Host for storing image
                  default: quay.io
                image_organization:
                  title: Organization
                  type: string
                  description: Name of the Quay Organization
    - title: Application repository Information
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
    - title: Provide information about the CI method
      required:
        - ci
      properties:
        ci:
          title: Select a CI 
          type: string
          description: This action will create a CI pipeline for your application based on chosen method
          default: ../../scaffolder-skeletons/tekton-skeleton/
          enum:
            - ./scaffolder-skeletons/tekton-skeleton-basic/
            - ./scaffolder-skeletons/tekton-skeleton-scan/
            - ./scaffolder-skeletons/tekton-skeleton-scan-check/
          enumNames:
            - Basique Tekton CI
            - Tekton CI with Security Check
            - Tekton CI with Scan and Security Check
    
    - title: Provide information about s3 bucket 
      required:
        - bucketName
        - awsAccessKeyID
        - awsSecretAccessKey
        - awsRegion 
        - awsEndpoint
      properties:
        bucketName:
          title: Bucket Name
          type: string
        awsAccessKeyID:
          title: Aws Access Key ID
          type: string
        awsSecretAccessKey:
          title: Aws Secret Access Key
          type: string
        awsRegion:
          title: Aws Region
          type: string
        awsEndpoint:
          title: Aws Endpoint
          type: string

  steps:
    - id: ciTemplate
      name: Generating the CI Component
      action: fetch:template
      input:
        url: ${{ parameters.ci }}
        copyWithoutTemplating: []
        values:
          component_id: ${{ parameters.component_id }}
          destination: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-tekton
          namespace: ${{ parameters.component_id }}-tekton
          githubOrg: ${{ parameters.githubOrg }}
          repoName: ${{ parameters.component_id }}-tekton
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          applicationType: api
          description: ci for ${{ parameters.component_id }}
          imageUrl: ${{ parameters.image_registry }}
          imageBuilder: s2i-python
          imageRepository: ${{ parameters.component_id }}
          port: 5000
          ci: ${{ parameters.ci }}
        targetPath: ./tenant-tekton

    - id: publish-pipeline
      name: Publishing Pipeline Repository
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?repo=${{ (parameters.repoUrl | parseRepoUrl).repo }}-tekton&owner=${{ (parameters.repoUrl | parseRepoUrl).owner }}
        defaultBranch: main
        protectDefaultBranch: false
        repoVisibility: public
        sourcePath: ./tenant-tekton

    - id: create-pipeline-resources
      name: Create Pipeline resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.component_id }}-tekton-bootstrap
        argoInstance: main
        namespace: openshift-gitops
        repoUrl: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-tekton.git
        path: 'argocd/'

    - id: template
      name: Generating component
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutTemplating:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          group_id: ${{ parameters.group_id }}
          artifact_id: ${{ parameters.artifact_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          cluster: .apps.cluster-bbcq4.bbcq4.sandbox419.opentlc.com
          destination: ${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}
          quay_destination: ${{ parameters.image_organization }}/${{ parameters.component_id }}
          port: 8080

    - id: publish
      name: Publishing to Source Code Repository
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        protectDefaultBranch: false
        repoVisibility: public

    - id: register
      name: Registering to the Catalog
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - id: template-gitops-deployment
      name: Generating Deployment Resources
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating: []
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          destination: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops
          source_repository: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}
          repository_name: ${{ (parameters.repoUrl | parseRepoUrl).repo }}
          git_owner: ${{ (parameters.repoUrl | parseRepoUrl).owner }}
          cluster: .apps.cluster-bbcq4.bbcq4.sandbox419.opentlc.com
          namespace: ${{ parameters.component_id }}-dev
          image_registry: ${{ parameters.image_registry }}
          image_host: ${{ parameters.image_host }}
          image_organization: ${{ parameters.image_organization }}
          image_name: ${{ parameters.component_id }}
          port: 8080
          deployment_name: quarkus-template
        targetPath: ./tenant-gitops

    - id: publish-gitops
      name: Publishing to Resource Repository
      action: publish:github
      input:
        repoUrl: github.com?repo=${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops&owner=${{ (parameters.repoUrl | parseRepoUrl).owner }}
        title: gitops resources for ${{ parameters.component_id }}
        description: gitops resources for ${{ parameters.component_id }}
        sourcePath: ./tenant-gitops
        repoVisibility: public

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.component_id }}-argo-bootstrap
        argoInstance: main
        namespace: openshift-gitops
        repoUrl: https://github.com/${{ (parameters.repoUrl | parseRepoUrl).owner }}/${{ (parameters.repoUrl | parseRepoUrl).repo }}-gitops.git
        path: 'argocd/'

    - id: sourceCodeTemplate
      name: Generating the Tech docsSource Code Component
      action: fetch:template
      input:
        url: ../../scaffolder-skeletons/techdocs-skeleton/
        copyWithoutTemplating: []
        values:
          githubOrg: ${{ parameters.githubOrg }}
          repoName: ${{ parameters.repoName }}-techdocs
          owner: ${{ parameters.owner }}
          # system: ${{ parameters.system }}
          applicationType: documentation
          description: Contains the techdocs for ${{ parameters.repoName }}
          bucketName: ${{ parameters.bucketName }}
          awsAccessKeyID: ${{ parameters.awsAccessKeyID }}
          awsSecretAccessKey: ${{ parameters.awsSecretAccessKey }}
          awsRegion: ${{ parameters.awsRegion }}
          awsEndpoint: ${{ parameters.awsEndpoint }}

    - id: catalogTemplate
      name: Generating the Catalog Info Component
      action: fetch:template
      input:
        url: ../../scaffolder-skeletons/catalog-info-skeleton/
        values:
          # Gitops specific values
          partOf: ${{ parameters.componentName }}
          githubOrg: ${{ parameters.githubOrg }}
          repoName: ${{ parameters.repoName }}-techdocs
          owner: ${{ parameters.owner }}
          # system: ${{ parameters.system }}
          applicationType: documentation
          description: Contains the techdocs for ${{ parameters.repoName }}

    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: Contains the techdocs for ${{ parameters.repoName }}
        repoUrl: github.com?owner=${{ parameters.githubOrg }}&repo=${{ parameters.repoName }}-techdocs
        defaultBranch: main

    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
